generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  gender   String
  imgSrc   String? @map("img_src")

  advertisements Advertisement[]
  notifications  Notification[]
  applications   Application[]

  @@map("users")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  type      String
  createdAt DateTime @default(now()) @map("created_at")

  recipient   User @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int  @map("recipient_id")

  @@map("notifications")
}

model Advertisement {
  id                  Int     @id @default(autoincrement())
  title               String
  description         String
  price               Float
  genderPreference    String  @map("gender_preference")
  allowOppositeGender Boolean @map("allow_opposite_gender")
  totalSlots          Int     @map("total_slots")
  occupiedSlots       Int     @map("occupied_slots")
  phone               String
  bedroomType         String  @map("bedroom_type")
  numBedroom          Int     @map("num_bedroom")
  numBathroom         Int     @map("num_bathroom")
  hasPet              Boolean @map("has_pet")
  isActive            Boolean @default(true) @map("is_active")
  imgSrc              String? @map("img_src")

  ownerId Int   @map("owner_id")
  stateId Int   @map("state_id")
  cityId  Int   @map("city_id")
  owner   User  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  state   State @relation(fields: [stateId], references: [id])
  city    City  @relation(fields: [cityId], references: [id])

  rules        Rule[]        @relation("AdvertisementRules")
  amenities    Amenity[]     @relation("AdvertisementAmenities")
  applications Application[]

  @@map("advertisements")
}

model Application {
  id        Int      @id @default(autoincrement())
  status    String   @default("PENDING")
  createdAt DateTime @default(now()) @map("created_at")
  message   String?

  applicantId     Int            @map("applicant_id")
  advertisementId Int            @map("advertisement_id")
  advertisement   Advertisement? @relation(fields: [advertisementId], references: [id])
  applicant       User?          @relation(fields: [applicantId], references: [id])

  @@unique([applicantId, advertisementId])
  @@map("applications")
}

model State {
  id            Int             @id @default(autoincrement())
  uf            String          @unique
  name          String
  cities        City[]
  advetisements Advertisement[]

  @@map("states")
}

model City {
  id            Int             @id @default(autoincrement())
  name          String
  state         State           @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId       Int
  advetisements Advertisement[]

  @@unique([name, stateId])
  @@map("cities")
}

model Rule {
  id    Int    @id @default(autoincrement())
  tag   String @unique
  value String

  advertisements Advertisement[] @relation("AdvertisementRules")

  @@map("rules")
}

model Amenity {
  id    Int    @id @default(autoincrement())
  tag   String @unique
  value String

  advertisements Advertisement[] @relation("AdvertisementAmenities")

  @@map("amenities")
}
